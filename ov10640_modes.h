#ifndef OV10640MODES_H_
#define OV10640MODES_H_

struct sensor_regs ov10640_mode0[] =
{
{0x311a,0x01},
{0x3088,0x00},
{0x3089,0x40},
{0x308d,0x92},
{0x3094,0xa5},
{0x30e6,0x04},
{0x30e7,0x4c},
{0x30e8,0x04},
{0x30e9,0x4c},
{0x30e9,0x05},
{0x30ec,0x01},
{0x30fa,0x06},
{0x3120,0x00},
{0x3121,0x01},
{0x3122,0x00},
{0x3127,0x63},
{0x3128,0xc0},
{0x3129,0x00},
{0x31be,0x00},
{0x30a5,0x78},
{0x30a6,0x40},
{0x30a7,0x78},
{0x30a8,0x80},
{0x30a9,0x78},
{0x30aa,0xe0},
{0x30ab,0x79},
{0x30ac,0xc0},
{0x3440,0x04},
{0x3444,0x28},
{0x344e,0x2c},
{0x3457,0x33},
{0x345e,0x38},
{0x3461,0xa8},
{0x30eb,0x04},
{0x30ed,0x5a},
{0x30ee,0x01},
{0x30ef,0x80},
{0x30f1,0x5a},
{0x303a,0x04},
{0x303b,0x7f},
{0x303c,0xfe},
{0x303d,0x19},
{0x303e,0xd7},
{0x303f,0x09},
{0x3040,0x78},
{0x3042,0x05},
{0x328a,0x00},
{0x31bf,0x9f},
{0x31c0,0xff},
{0x3012,0x01},
{0x3012,0x00},
{0x3000,0x03},
//{0x3001,0x30},
{0x3001,0x30},
{0x3002,0x07},
{0x3004,0x03},
//{0x3005,0x60},
{0x3005,0x30},
{0x3006,0x07},
{0x308f,0x10},
{0x3127,0x63},
{0x3444,0x28},
{0x3090,0x00},
{0x3091,0x00},
{0x3119,0x55},
{0x3012,0x01},
{0x3012,0x00},
{0x3000,0x03},
{0x3001,0x30},
{0x3002,0x07},
{0x3004,0x03},
{0x3005,0x30},
{0x3006,0x07},
{0x308f,0x10},
{0x3127,0x63},
{0x3074,0x00},    
{0x3075,0x00},   
{0x3076,0x00},    
{0x3077,0x02},   
{0x3078,0x05},                                   
{0x3079,0x07},    
{0x307a,0x04},            
{0x307b,0x41},    
{0x307c,0x02},    
{0x307d,0x80},   
{0x307e,0x04},   
{0x307f,0x38},   
{0x3080,0x05},    
{0x3081,0xB2},    
{0x3082,0x04},   
{0x3083,0x74},   
{0x3084,0x00},    
{0x3085,0x04},    
{0x3086,0x00},    
{0x3087,0x04},    
{0x346d,0x28},   
{0x3444,0x28},    
{0x3091,0x0C},    
{0x3119,0x55},    
{0x3012,0x01},    

{0x3129,0xC8},
};

struct sensor_regs ov10640_mode1[] =
{
    {0x0100, 0x00},
    {0x0100, 0x01}
};

struct sensor_regs ov10640_mode2[] =
{
    {0x0100, 0x00},
    {0x0100, 0x01}
};

struct mode_def ov10640_modes[] = {
   {
      .regs          = ov10640_mode0,
      .num_regs      = NUM_ELEMENTS(ov10640_mode0),
      .width         = 640,
      .height        = 1080,
      .encoding      = 0,
      .order         = BAYER_ORDER_BGGR,
      .native_bit_depth = 12,
      .image_id      = 0x2C,
      .data_lanes    = 2,
      .min_vts       = 1104,
      .line_time_ns  = 30375,
    //   .line_time_ns  = 15187,
   
      .timing        = {0, 0, 0, 0, 0},
      .term          = {0, 0},
      .black_level   = 16,
   },
  
};

struct sensor_regs ov10640_stop[] = {
   { 0x0100, 0x00 },
};

// ID register settings taken from http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg1298623.html
struct sensor_def ov10640 = {
   .name =                 "ov10640",
   .modes =                ov10640_modes,
   .num_modes =            NUM_ELEMENTS(ov10640_modes),
   .stop =                 ov10640_stop,
   .num_stop_regs =        NUM_ELEMENTS(ov10640_stop),

    // NOTICE: datasheet the address is 0x60@8bits, the pi will use 0x30@7bits,
    // But 0x30 will conflict with the UB954 device id, so we adjust it's value to 0x31@7bits


   .i2c_addr =             0x31,
   .i2c_addressing =       2,
   .i2c_ident_length =     2,
   .i2c_ident_reg =        0x300A,
   .i2c_ident_value =      0x40A6,  //0x10640 byte swapped

   .vflip_reg =            0x3090,  // TODO:
   .vflip_reg_bit =        3,       // TODO:
   .hflip_reg =            0x3090,  // TODO:
   .hflip_reg_bit =        2,       // TODO:

   .exposure_reg =         0x30E6,  // TODO:
   .exposure_reg_num_bits = 16,     // TODO:

   .vts_reg =              0x3082,  // TODO:
   .vts_reg_num_bits =     16,      // TODO:

   .gain_reg =             0x30EC,  // TODO:
   .gain_reg_num_bits =    6,      // TODO:
};

#endif
